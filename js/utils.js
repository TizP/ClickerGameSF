// js/utils.js
"use strict";
import { MONEY_FORMAT_THRESHOLD } from './config.js';

export function formatNumber(num) { if(num === Infinity) return 'Infinity'; if(num === null || num === undefined || isNaN(num)) return '0'; const absNum = Math.abs(num); const sign = num < 0 ? '-' : ''; if(absNum < 1e3) return sign + absNum.toFixed(0); const tiers = ['', 'k', 'M', 'B', 'T', 'q', 'Q', 's', 'S', 'o', 'N', 'd']; const tierIndex = Math.max(0, Math.min(tiers.length - 1, Math.floor(Math.log10(absNum) / 3))); const scaledNum = absNum / Math.pow(1000, tierIndex); let precision = 0; if(tierIndex > 0) { if(scaledNum < 10) precision = 2; else if(scaledNum < 100) precision = 1; } const formattedNum = scaledNum.toFixed(precision); const finalNumString = (precision > 0 && parseFloat(formattedNum) === Math.floor(scaledNum)) ? Math.floor(scaledNum).toString() : formattedNum; return sign + finalNumString + tiers[tierIndex]; }
export function formatPerSecond(num, unit = "Units") { if(num !== 0 && Math.abs(num) < 10 && Math.abs(num) >= 0.01) return num.toFixed(2) + ` ${unit}/Sec`; else if(num !== 0 && Math.abs(num) < 0.01 && num !== 0) return num.toExponential(2) + ` ${unit}/Sec`; else return formatNumber(num) + ` ${unit}/Sec`; }
export function formatMoney(num) { if(num === null || num === undefined || isNaN(num)) return '0.00'; const absNum = Math.abs(num); const sign = num < 0 ? '-' : ''; if(absNum < MONEY_FORMAT_THRESHOLD) return sign + absNum.toFixed(2); return sign + formatNumber(num); }
export function formatRateMoney(num) { if(num === 0 || num === null || num === undefined || isNaN(num)) return '0.000'; if(Math.abs(num) < 1e-3 && num !== 0) return num.toExponential(2); if(Math.abs(num) < 1) return num.toFixed(3); if(Math.abs(num) < 1000) return num.toFixed(2); return formatNumber(num); }
export function formatCAR(num) { return formatRateMoney(num); }
export function formatPercent(num, decimals = 1) { if(num === null || num === undefined || isNaN(num)) return '0.0%'; return (num * 100).toFixed(decimals) + '%'; }
export function formatTime(milliseconds) { if(milliseconds < 0 || isNaN(milliseconds)) return "0s"; const totalSeconds = Math.floor(milliseconds / 1000); const days = Math.floor(totalSeconds / 86400); const hours = Math.floor((totalSeconds % 86400) / 3600); const minutes = Math.floor((totalSeconds % 3600) / 60); const seconds = totalSeconds % 60; let parts = []; if(days > 0) parts.push(`${days}d`); if(hours > 0) parts.push(`${hours}h`); if(minutes > 0) parts.push(`${minutes}m`); if(seconds >= 0 || parts.length === 0) parts.push(`${seconds}s`); return parts.join(' ') || '0s'; }